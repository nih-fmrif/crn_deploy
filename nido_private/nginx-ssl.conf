error_log /var/log/nginx/for_docker/nginx_error.log info;


server {
    listen 80 default_server;
    listen [::]:80 default_server;

    # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
    return 302 https://$host$request_uri;
}

server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name localhost;

        # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
        ssl_certificate /etc/ssl/certs/nido_cert.crt;
        ssl_certificate_key /etc/ssl/private/nido_key.key;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;


        # modern configuration. tweak to your needs.
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers "ECDH+AESGCM:ECDH+AES256:ECDH+AES128:ECDH+3DES:RSA+AES:RSA+3DES:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!ADH:!AECDH:!MD5:!DSS:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA";
        ssl_prefer_server_ciphers on;

        # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload" always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;

        # OCSP Stapling ---
        # fetch OCSP records from URL in ssl_certificate and cache them
        ssl_stapling on;
        ssl_stapling_verify on;

        ## verify chain of trust of OCSP response using Root CA and Intermediate certs
        #ssl_trusted_certificate /etc/ssl/certs/ssl_trusted_cert.crt;

        #resolver <IP DNS resolver>;
        resolver_timeout 5s;

        charset     utf-8;
        
        # bids-core proxy
        location /api {
                uwsgi_pass uwsgi://core:8112;
                uwsgi_buffering off;
                uwsgi_buffers 8 1M;
                uwsgi_request_buffering off;
                include uwsgi_params;
                proxy_set_header Host $host;
                client_max_body_size 50g;
                add_header Access-Control-Allow-Origin $http_origin always;
                if ($request_method = OPTIONS) {
                        add_header Access-Control-Allow-Origin $http_origin always;
                        add_header Access-Control-Allow-Methods 'GET, HEAD, POST, PUT, DELETE, OPTIONS';
                        add_header Access-Control-Allow-Headers 'Authorization, Content-Type, Content-MD5';
                        add_header Access-Control-Max-Age 151200;
                        return 204;
                }
        }

        # crn-server proxy
        location /crn {
                proxy_pass http://server:8111;
        }

        # crn-web app
        root /srv/crn-app/dist;
        location / {
                try_files $uri $uri/ /index.html;
        }
}